// todo –æ–≥–¥–∞ –æ–Ω –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫–∞ –Ω–∞—á–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –µ—Å–ª–∏ 8 = –∫–æ–Ω–Ω–µ–∫—Ç–µ–¥
import React, { Component } from 'react';
import { Client } from '@stomp/stompjs';
import Popup from 'reactjs-popup';
import 'reactjs-popup/dist/index.css';
import "./pagestyle.css";

class Glavniy extends Component {
// todo fix before start game error
  state = {
    criteriaMsg: null,
    decline: '',
    connected: false,
    criteriaMsgIsReceived: false,
    playersNumber: null,
    criteria: null,
    allAnketasIsCollected: false,
    showInterruptionBtn: false,
    showMapRolesBtn: false,
    kolvoUserov: 0,
    showResults: false,
    info: ''
  }
  handleChange = (event) => {
    // üëá Get input value from "event"
    this.setState({decline : event.target.value});


  }
  componentDidMount = () => {
    console.log('Component did mount');
    // The compat mode syntax is totally different, converting to v5 syntax
    // Client is imported from '@stomp/stompjs'
    this.client = new Client();

    this.client.configure({
      brokerURL: 'ws://localhost:8080/squid-game-socket?username=glavniy',
      connectHeaders: {
        Authorization: 'Bearer ' + localStorage.getItem('glavniy')
      },
      onConnect: () => {
        this.setState({info: '–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤'})
        console.log('onConnect');
        this.handleSend();
      },
      // Helps during debugging, remove in production
      debug: (str) => {
        console.log(new Date(), str);
      }
    });

    this.client.activate();


  }

  //todo: 1. –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–≥ —Å –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã


  handleSend = () => {

    if (this.client.webSocket.readyState === WebSocket.OPEN) {
      const headers = { Authorization: 'Bearer ' + localStorage.getItem('glavniy')}
      this.client.subscribe('/glavniy/messages', message => {
        // console.log('message: ',JSON.parse(message.body));

        let sad = JSON.parse(message.body);
        if (sad.type === 'FORMS_SELECTION_COMPLETED'){
          this.setState({info: '–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞–Ω–∫–µ—Ç—ã'})
          this.setState({criteriaMsgIsReceived: false});
          this.setState({showInterruptionBtn: false});
          this.setState({allAnketasIsCollected: true});
        }
        if (sad.type === 'USERS_STATUS_MESSAGE') {
          this.setState({kolvoUserov: sad.connectedUsers.length})
          if (sad.connectedUsers.length >= 10) {
            this.setState({showMapRolesBtn: true})
            this.setState({kolvoUserov: sad.connectedUsers.length})
          }
        }
        if (sad.type === 'LUNCH_STARTED') {
          this.setState({info: '–†–∞–±–æ—á–∏–µ –Ω–∞—á–∞–ª–∏ –≥–æ—Ç–æ–≤–∫—É –µ–¥—ã –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤'})
        }
        if (sad.type === 'FOOD_PREPARED') {
          this.setState({info: '–ò–≥—Ä–æ–∫–∏ –±–æ—Ä—é—Ç—Å—è –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–ª—é–¥'})
        }
        if (sad.type === 'STARTED_ROUND_PREPARINGS') {
          this.setState({info: '–†–∞–±–æ—á–∏–µ –Ω–∞—á–∞–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∏–≥—Ä—ã'})
        }
        if (sad.type === 'ROUND_PREPARING_COMPLETED') {
          this.setState({info: '–†–∞–±–æ—á–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∏–≥—Ä—ã'})
        }
        if (sad.type === 'START_TRAINING') {
          this.setState({info: '–ù–∞—á–∞–ª–∞—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–ª–¥–∞—Ç'})
        }
        if (sad.type === 'TRAINING_COMPLETED') {
          this.setState({info: 'C–æ–ª–¥–∞—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç—Ä–∏–Ω–∏—Ä–æ–≤–∫—É'})
        }
        if (sad.type === 'START_CLEANING') {
          this.setState({info: '–†–∞–±–æ—á–∏–µ –Ω–∞—á–∞–ª–∏ —É–±–æ—Ä–∫—É'})
        }
        if (sad.type === 'STOP_CLEANING') {
          this.setState({info: '–†–∞–±–æ—á–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —É–±–æ—Ä–∫—É'})
        }
        if (sad.type === 'RESULTS_READY') {
          this.setState({info: 'C–æ–ª–¥–∞—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç—Ä–∏–Ω–∏—Ä–æ–≤–∫—É'})
          this.setState({showResults: true})
          fetch('http://localhost:8080/account/1/results', {
            headers: {
              "Content-Type": "application/json",
              'Authorization': 'Bearer ' + localStorage.getItem('manager')
            },
            method: 'GET',
            mode: 'cors'
          }).then(res => {
            res.json().then(data => {
              let finulResultsArr = [{}]
              let playersResultArr = []
              let workersResultArr = []
              let soldiersResultArr = []
              finulResultsArr = data
              finulResultsArr.forEach(account => {
                if (account.role === 'PLAYER') {
                  playersResultArr.push(account)
                }
                if (account.role === 'WORKER') {
                  workersResultArr.push(account)
                }
                if (account.role === 'SOLDIER') {
                  soldiersResultArr.push(account)
                }
              })
              workersResultArr.sort((a, b) => a.score > b.score ? 1 : -1)
              soldiersResultArr.sort((a, b) => a.score > b.score ? 1 : -1)
              playersResultArr.sort(a => a?.participatesInGame ? 1 : -1).sort((a, b) => a.score > b.score ? 1 : -1)
              console.log(workersResultArr, 'worker')
              console.log(soldiersResultArr, 'soldier')
              console.log(playersResultArr, 'player')

              const resultsArea = document.getElementById('results')

              function createSoldierTable() {

                const tableSoldier = document.createElement('table')
                tableSoldier.style.padding = "15px"
                tableSoldier.style.border = "2px solid coral"
                tableSoldier.style.textAlign = "center"
                const headerRow = tableSoldier.insertRow(0)
                headerRow.innerText = '–ò—Ç–æ–≥–∏ —Å–æ–ª–¥–∞—Ç'
                const columnHeaderRow = tableSoldier.insertRow(1)
                columnHeaderRow.insertCell(0).innerText = 'id'
                columnHeaderRow.insertCell(1).innerText = '–∏–º—è'
                columnHeaderRow.insertCell(2).innerText = '—Ä–æ–ª—å'
                // columnHeaderRow.insertCell(3).innerText = '–∂–∏–≤–æ–π'
                columnHeaderRow.insertCell(3).innerText = '—Å—á–µ—Ç'
                for (let i = 0; i < soldiersResultArr.length; i++) {
                  const row = tableSoldier.insertRow(i + 2)
                  row.insertCell(0).innerText = soldiersResultArr[i].id
                  row.insertCell(1).innerText = soldiersResultArr[i].username
                  row.insertCell(2).innerText = soldiersResultArr[i].role
                  // row.insertCell(3).innerText = soldiersResultArr[i]?.participatesInGame
                  row.insertCell(3).innerText = soldiersResultArr[i].score

                }

                return tableSoldier
              }

              function createWorkersTable() {
                const tableWorker = document.createElement('table')
                tableWorker.style.padding = "15px"
                tableWorker.style.border = "2px solid coral"
                tableWorker.style.textAlign = "center"
                // tableWorker.style={border: "5px", padding: '15px', textAlign: 'center' }
                const headerRow = tableWorker.insertRow(0)
                headerRow.innerText = '–ò—Ç–æ–≥–∏ —Ä–∞–±–æ—á–∏—Ö'
                const columnHeaderRow = tableWorker.insertRow(1)
                columnHeaderRow.insertCell(0).innerText = 'id'
                columnHeaderRow.insertCell(1).innerText = '–∏–º—è'
                columnHeaderRow.insertCell(2).innerText = '—Ä–æ–ª—å'
                // columnHeaderRow.insertCell(3).innerText = '–∂–∏–≤–æ–π'
                columnHeaderRow.insertCell(3).innerText = '—Å—á–µ—Ç'
                for (let i = 0; i < soldiersResultArr.length; i++) {
                  const row = tableWorker.insertRow(i + 2)
                  row.insertCell(0).innerText = workersResultArr[i].id
                  row.insertCell(1).innerText = workersResultArr[i].username
                  row.insertCell(2).innerText = workersResultArr[i].role
                  // row.insertCell(3).innerText = workersResultArr[i]?.participatesInGame
                  row.insertCell(3).innerText = workersResultArr[i].score

                }
                return tableWorker
              }

              function createPlayersTable() {
                const tablePlayer = document.createElement('table')
                tablePlayer.style.padding = "15px"
                tablePlayer.style.border = "2px solid coral"
                tablePlayer.style.textAlign = "center"

                // ={border: "5px", padding: '15px', textAlign: 'center' }
                const headerRow = tablePlayer.insertRow(0)
                headerRow.innerText = '–ò—Ç–æ–≥–∏ –∏–≥—Ä–æ–∫–æ–≤'
                const columnHeaderRow = tablePlayer.insertRow(1)
                columnHeaderRow.insertCell(0).innerText = 'id'
                columnHeaderRow.insertCell(1).innerText = '–∏–º—è'
                columnHeaderRow.insertCell(2).innerText = '—Ä–æ–ª—å'
                columnHeaderRow.insertCell(3).innerText = '–∂–∏–≤–æ–π'
                columnHeaderRow.insertCell(4).innerText = '—Å—á–µ—Ç'
                for (let i = 0; i < playersResultArr.length; i++) {
                  const row = tablePlayer.insertRow(i + 2)
                  row.insertCell(0).innerText = playersResultArr[i].id
                  row.insertCell(1).innerText = playersResultArr[i].username
                  row.insertCell(2).innerText = playersResultArr[i].role
                  if (playersResultArr[i]?.participatesInGame) {
                    row.insertCell(3).innerText = '–í—ã–∂–∏–ª'
                  } else { row.insertCell(3).innerText = '–ú–µ—Ä—Ç–≤' }
                  row.insertCell(4).innerText = playersResultArr[i].score
                }
                return tablePlayer
              }

              resultsArea.appendChild(createSoldierTable())
              resultsArea.appendChild(createWorkersTable())
              resultsArea.appendChild(createPlayersTable())
            })
          })
          this.setState({info: '–ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'})
        }
        else {
          this.setState({info: '–ü–æ–ª—É—á–µ–Ω—ã –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏–≥—Ä—ã –æ—Ç –º–∞–Ω–∞–≥–µ—Ä–∞'})
          this.setState({showMapRolesBtn: false})
          this.setState({playersNumber: sad.criteria?.playersNumber});
          this.setState({criteria: sad.criteria?.criteria});
          // console.log('playersNumber :',sad.criteria.playersNumber);
          // console.log('criteria',sad.criteria.criteria);
          this.setState({criteriaMsg: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ : ' + sad.criteria?.playersNumber + " –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ç–±–æ—Ä–∞ : " + sad.criteria?.criteria});
          this.setState({criteriaMsgIsReceived: true});
          // console.log('Criteria msg is recieved: ',this.state.criteriaMsgIsReceived);
        }
      }, headers);

    } else {
      // Queue a retry
      setTimeout(() => { this.handleSend() }, 100)
    }
  };
  interuptPlayersSelection = () =>{
    fetch('http://localhost:8080/interruptPlayersSelection',{
      headers: {
        "Content-Type": "application/json",
        'Authorization': 'Bearer ' + localStorage.getItem('glavniy')
      },
      method: 'GET',
      mode: 'cors'
    }).then()
    this.setState({info: '–û—Ç–±–æ—Ä –∞–Ω–∫–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–µ—Ä–≤–∞–Ω'})
  }
  interuptRoundPreparing = () => {
    fetch('http://localhost:8080/interruptRoundPreparing',{
      headers: {
        "Content-Type": "application/json",
        'Authorization': 'Bearer ' + localStorage.getItem('glavniy')
      },
      method: 'GET',
      mode: 'cors'
    })
    this.setState({info: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—É–Ω–¥–∞ –∏–≥—Ä—ã –ø—Ä–µ—Ä–≤–∞–Ω–∞'})
  }
  showResults = () => {
    fetch('http://localhost:8080/showResults',{
      headers: {
        "Content-Type": "application/json",
        'Authorization': 'Bearer ' + localStorage.getItem('glavniy')
      },
      method: 'GET',
      mode: 'cors'
    })
    this.setState({info: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã'})

  }


  startGame = () =>{
    fetch('http://localhost:8080/startGame',{
      headers: {
        "Content-Type": "application/json",
        'Authorization': 'Bearer ' + localStorage.getItem('glavniy')
      },
      method: 'GET',
      mode: 'cors'
    }).then(
        //todo: –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ –Ω–∏–±—É–¥—å
    )
    this.setState({info: '–ù–∞—á–∞–ª—Å—è —Ä–∞—É–Ω–¥ –∏–≥—Ä—ã'})
  }
  mapRole = () => {
    fetch('http://localhost:8080/startRolesDistribution',{
      headers: {
        'Authorization': 'Bearer ' + localStorage.getItem('glavniy')
      },
      method: 'GET',
      mode: 'cors'
    })
    this.setState({info: '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'})
    this.setState({showMapRolesBtn: false})
  }
  clickHandler = () => {
    // const sad = JSON.parse(message.body);
    const confirmMessage ={
      confirm: true,
      criteria: {
        playersNumber: this.state.playersNumber,
        criteria: this.state.criteria,
        gameId: 1
      },
      declineReason: null
    }
    this.client.publish({destination: '/app/sendAnswer', headers: {Authorization: 'Bearer ' + localStorage.getItem('glavniy')}, body: JSON.stringify(confirmMessage)});
    this.setState({showInterruptionBtn: true});
    this.setState({info: '–ö—Ä–∏—Ç–µ—Ä–∏–∏ –∏–≥—Ä—ã —É—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤'})
  }
  clickHandler2 = () => {
    // const sad = JSON.parse(message.body);
    const confirmMessage ={
      confirm: false,
      criteria: {
        playersNumber: this.state.playersNumber,
        criteria: this.state.criteria,
        gameId: 1
      },
      declineReason: this.state.decline
    }
    this.client.publish({destination: '/app/sendAnswer', headers: {Authorization: 'Bearer ' + localStorage.getItem('glavniy')}, body: JSON.stringify(confirmMessage)});
    this.setState({info: '–ö—Ä–∏—Ç–µ—Ä–∏–∏ –∏–≥—Ä—ã –Ω–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã'})
  }

  render() {
    return (
        <div className="App">
          <header className="App-header">
              <div>
                <button onClick={this.mapRole}>–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–æ–ª–∏ –∏ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É</button>
              </div>
            <div style={{margin: '7px'}}>
            {this.state.info}
            </div>
            <br/>
            <div>–ö–æ–ª-–≤–æ –∑–∞–∫–æ–Ω–Ω–µ–∫—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π : {this.state.kolvoUserov}</div>

            {this.state.criteriaMsgIsReceived === true &&
                <div className="ManagerMessagee" id="managerMessagee" align="center">
                  <p id="manager_message">
                    –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ : {this.state.criteriaMsg ? this.state.criteriaMsg : 'no data'}
                  </p><p>
                  –í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —Ç–∞–∫–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã?
                </p>
                  <p>
                    <button id="yesBtn"  onClick={this.clickHandler}>Yes</button>
                    <button id="noBtn" onClick={this.clickHandler2}>No</button>
                  </p>
                  <p>
                      <label>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ :</label>
                      <input type ="text" id="decline" name="decline" placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞" onChange={this.handleChange}/>
                  </p>
                </div>

            }
            {this.state.showInterruptionBtn === true &&
                <button type="submit" onClick={this.interuptPlayersSelection}>–ü—Ä–µ—Ä–≤–∞—Ç—å –æ—Ç–±–æ—Ä –∞–Ω–∫–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</button>
            }
            <br/><div>
              <button type="submit" onClick={this.interuptRoundPreparing}>–ü—Ä–µ—Ä–≤–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É —Ä–∞—É–Ω–¥–∞</button>
            </div>
            <div>
              <br/>
              <button type="submit" onClick={this.showResults}>–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É</button>
            </div>
            {this.state.allAnketasIsCollected === true &&
            <div id="Start_of_the_game" align="center">
              <p>
                <h2>–ê–Ω–∫–µ—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã –≤ –∫–∞–ª—å–º–∞—Ä–∞ –æ—Ç–æ–±—Ä–∞–Ω—ã</h2>
              </p>
              <button type="submit" onClick={this.startGame}>–ù–∞—á–∞—Ç—å –∏–≥—Ä—É</button>
            </div>
            }
            {this.state.showResults === true &&
                <div id="results" style={{display: "flex", marginLeft: '300px', marginTop: '100px'}}>
                </div>}
          </header>
        </div>
    );
  }
}

export default Glavniy;